#!/usr/bin/env python3
"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á export_manager ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
"""

import os
import sys

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import ‡πÑ‡∏î‡πâ
sys.path.append(os.path.dirname(__file__))

def test_export_manager():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö ExportManager ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
    
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö ExportManager...")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö import
        from export_manager import ExportManager
        print("‚úÖ import ExportManager ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô normalize_thai_text
        class MockExportManager:
            def __init__(self):
                pass
                
            def normalize_thai_text(self, text):
                """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
                import unicodedata
                
                if not text:
                    return text
                
                # ‡πÉ‡∏ä‡πâ Unicode normalization ‡πÅ‡∏ö‡∏ö NFC
                text = unicodedata.normalize('NFC', text)
                
                # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                thai_vowels = [
                    '\u0E31',  # ‡∏± mai han-akat
                    '\u0E34',  # ‡∏¥ sara i
                    '\u0E35',  # ‡∏µ sara ii
                    '\u0E36',  # ‡∏∂ sara ue
                    '\u0E37',  # ‡∏∑ sara uee
                    '\u0E38',  # ‡∏∏ sara u
                    '\u0E39',  # ‡∏π sara uu
                    '\u0E3A',  # ‡∏∫ phinthu
                ]
                
                thai_tone_marks = [
                    '\u0E48',  # ‡πà mai ek
                    '\u0E49',  # ‡πâ mai tho
                    '\u0E4A',  # ‡πä mai tri
                    '\u0E4B',  # ‡πã mai chattawa
                    '\u0E4C',  # ‡πå thanthakhat
                ]
                
                # ‡πÅ‡∏ó‡∏£‡∏Å Zero Width Non-Joiner (ZWNJ) ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß
                result = ""
                for i, char in enumerate(text):
                    if char in thai_vowels or char in thai_tone_marks:
                        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ZWNJ ‡πÅ‡∏•‡πâ‡∏ß
                        if i > 0 and text[i-1] != '\u200C':
                            result += '\u200C'  # ZWNJ
                    result += char
                
                return result
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô normalize_thai_text
        mock_manager = MockExportManager()
        
        test_cases = [
            "‡∏ó‡∏µ‡πà",
            "‡πÄ‡∏û‡∏∑‡πà‡∏≠", 
            "‡∏Å‡πà‡∏≠‡∏ô",
            "‡πÅ‡∏•‡πâ‡∏ß",
            "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
            "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô",
            "‡πÉ‡∏´‡∏°‡πà",
            "‡πÑ‡∏î‡πâ",
            "‡∏Ñ‡∏∑‡∏ô",
            "‡πÄ‡∏°‡∏∑‡πà‡∏≠",
            "‡∏õ‡∏µ‡πà",
            "‡∏Å‡∏µ‡πà"
        ]
        
        print("\nüìù ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô normalize_thai_text:")
        for test_text in test_cases:
            original = test_text
            normalized = mock_manager.normalize_thai_text(test_text)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Unicode codepoints
            original_codes = " ".join([f"U+{ord(c):04X}" for c in original])
            normalized_codes = " ".join([f"U+{ord(c):04X}" for c in normalized])
            
            print(f"   {original} -> {normalized}")
            print(f"     Original:  {original_codes}")
            print(f"     Normalized: {normalized_codes}")
            
            if original != normalized:
                print(f"     ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏û‡∏¥‡πà‡∏° ZWNJ)")
            else:
                print(f"     ‚ÑπÔ∏è  ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")
            print()
        
        print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô normalize_thai_text ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ PDF_AVAILABLE
        if hasattr(ExportManager, '__module__'):
            import export_manager
            if hasattr(export_manager, 'PDF_AVAILABLE'):
                if export_manager.PDF_AVAILABLE:
                    print("‚úÖ PDF export ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (ReportLab)")
                else:
                    print("‚ùå PDF export ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            else:
                print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ PDF_AVAILABLE")
        
        print("\nüéØ ExportManager ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
        print("üí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ export PDF ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ")
        print("üìã ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà:")
        print("   ‚Ä¢ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢")
        print("   ‚Ä¢ ‡πÉ‡∏ä‡πâ Unicode normalization (NFC)")
        print("   ‚Ä¢ ‡πÅ‡∏ó‡∏£‡∏Å ZWNJ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå")
        print("   ‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° leading ‡πÉ‡∏ô styles ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("=" * 60)
    print("‡∏ó‡∏î‡∏™‡∏≠‡∏ö ExportManager ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß")
    print("=" * 60)
    print()
    
    test_export_manager()
