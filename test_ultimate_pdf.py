#!/usr/bin/env python3
"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö PDF ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Å‡∏ß‡πà‡∏≤
"""

import os
import time
import tempfile
import unicodedata

def fix_thai_text_advanced(text):
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Å‡∏ß‡πà‡∏≤"""
    if not text:
        return text
    
    # ‡πÉ‡∏ä‡πâ Unicode normalization ‡πÅ‡∏ö‡∏ö NFC
    text = unicodedata.normalize('NFC', text)
    
    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ HTML entities ‡∏´‡∏£‡∏∑‡∏≠ space
    problematic_words = {
        '‡∏ó‡∏µ‡πà': '‡∏ó‡∏µ‡πà ',  # ‡πÄ‡∏û‡∏¥‡πà‡∏° space ‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå
        '‡πÄ‡∏û‡∏∑‡πà‡∏≠': '‡πÄ‡∏û‡∏∑‡πà‡∏≠ ',
        '‡∏Å‡πà‡∏≠‡∏ô': '‡∏Å‡πà‡∏≠‡∏ô ',
        '‡πÅ‡∏•‡πâ‡∏ß': '‡πÅ‡∏•‡πâ‡∏ß ',
        '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô': '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ',
        '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô': '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ',
        '‡πÉ‡∏´‡∏°‡πà': '‡πÉ‡∏´‡∏°‡πà ',
        '‡πÑ‡∏î‡πâ': '‡πÑ‡∏î‡πâ ',
        '‡∏Ñ‡∏∑‡∏ô': '‡∏Ñ‡∏∑‡∏ô ',
        '‡πÄ‡∏°‡∏∑‡πà‡∏≠': '‡πÄ‡∏°‡∏∑‡πà‡∏≠ ',
        '‡∏õ‡∏µ‡πà': '‡∏õ‡∏µ‡πà ',
        '‡∏Å‡∏µ‡πà': '‡∏Å‡∏µ‡πà '
    }
    
    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    for problem_word, fixed_word in problematic_words.items():
        text = text.replace(problem_word, fixed_word)
    
    # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ‡πÅ‡∏ó‡∏£‡∏Å Zero Width Space (ZWSP) ‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå
    thai_tone_marks = ['\u0E48', '\u0E49', '\u0E4A', '\u0E4B']  # ‡πà ‡πâ ‡πä ‡πã
    thai_vowels = ['\u0E34', '\u0E35', '\u0E36', '\u0E37', '\u0E38', '\u0E39', '\u0E31']  # ‡∏¥ ‡∏µ ‡∏∂ ‡∏∑ ‡∏∏ ‡∏π ‡∏±
    
    result = ""
    for i, char in enumerate(text):
        result += char
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° ZWSP ‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå
        if char in thai_tone_marks or char in thai_vowels:
            if i < len(text) - 1:  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                result += '\u200B'  # Zero Width Space
    
    return result

def test_ultimate_pdf():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö PDF ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡∏î‡πÇ‡∏ï‡πà‡∏á"""
    
    try:
        from reportlab.lib.pagesizes import A4
        from reportlab.lib.units import inch
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        test_text = "‡∏ó‡∏µ‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ‡πÉ‡∏´‡∏°‡πà ‡πÑ‡∏î‡πâ ‡∏Ñ‡∏∑‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡∏õ‡∏µ‡πà ‡∏Å‡∏µ‡πà"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
        temp_dir = tempfile.gettempdir()
        pdf_filename = os.path.join(temp_dir, "ultimate_thai_test.pdf")
        
        print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡∏î‡πÇ‡∏ï‡πà‡∏á...")
        
        doc = SimpleDocTemplate(pdf_filename, pagesize=A4,
                              rightMargin=1*inch, leftMargin=1*inch,
                              topMargin=1*inch, bottomMargin=1*inch)
        
        story = []
        
        # ‡∏•‡∏≠‡∏á‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
        font_options = [
            ('/System/Library/Fonts/Thonburi.ttc', 'Thonburi'),
            ('/System/Library/Fonts/Krungthep.ttc', 'Krungthep'),
            ('/Library/Fonts/Ayuthaya.ttf', 'Ayuthaya'),
        ]
        
        used_font = 'Helvetica'
        for font_path, font_name in font_options:
            if os.path.exists(font_path):
                try:
                    pdfmetrics.registerFont(TTFont(font_name, font_path, validate=True))
                    used_font = font_name
                    print(f"‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå: {font_name}")
                    break
                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå {font_name}: {e}")
                    continue
        
        if used_font == 'Helvetica':
            print("‚ö†Ô∏è  ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Helvetica (fallback)")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á styles ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡∏î‡πÇ‡∏ï‡πà‡∏á
        title_style = ParagraphStyle('Title',
                                   fontSize=18,
                                   fontName=used_font,
                                   alignment=TA_CENTER,
                                   spaceAfter=30,
                                   leading=30)  # leading ‡∏°‡∏´‡∏≤‡∏®‡∏≤‡∏•
        
        extreme_style = ParagraphStyle('Extreme',
                                     fontSize=14,
                                     fontName=used_font,
                                     spaceAfter=20,
                                     leading=36)  # leading ‡∏°‡∏´‡∏≤‡∏®‡∏≤‡∏• 36pt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 14pt font
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        story.append(Paragraph("‡∏ó‡∏î‡∏™‡∏≠‡∏ö PDF ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡∏î‡πÇ‡∏ï‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", title_style))
        story.append(Paragraph(f"‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {used_font}", extreme_style))
        story.append(Spacer(1, 20))
        
        story.append(Paragraph("1. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥:", extreme_style))
        story.append(Paragraph(test_text, extreme_style))
        
        story.append(Paragraph("2. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß:", extreme_style))
        fixed_text = fix_thai_text_advanced(test_text)
        story.append(Paragraph(fixed_text, extreme_style))
        
        story.append(Paragraph("3. ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡πÜ:", extreme_style))
        words = test_text.split()
        for word in words:
            fixed_word = fix_thai_text_advanced(word)
            story.append(Paragraph(f"‚Ä¢ {word} ‚Üí {fixed_word}", extreme_style))
        
        story.append(Paragraph("4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏¢‡∏≤‡∏ß:", extreme_style))
        long_sentence = "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏µ‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß ‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô"
        fixed_long = fix_thai_text_advanced(long_sentence)
        story.append(Paragraph(fixed_long, extreme_style))
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
        doc.build(story)
        
        if os.path.exists(pdf_filename):
            file_size = os.path.getsize(pdf_filename)
            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            print(f"   ‡πÑ‡∏ü‡∏•‡πå: {pdf_filename}")
            print(f"   ‡∏Ç‡∏ô‡∏≤‡∏î: {file_size/1024:.1f} KB")
            print(f"   ‡∏ü‡∏≠‡∏ô‡∏ï‡πå: {used_font}")
            print(f"   Leading: 36pt (‡∏°‡∏´‡∏≤‡∏®‡∏≤‡∏•)")
            print(f"\nüìñ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
            print(f"üîç ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÑ‡∏î‡πâ")
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("=" * 60)
    print("‡∏ó‡∏î‡∏™‡∏≠‡∏ö PDF ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡∏î‡πÇ‡∏ï‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢")
    print("=" * 60)
    print()
    
    test_ultimate_pdf()
